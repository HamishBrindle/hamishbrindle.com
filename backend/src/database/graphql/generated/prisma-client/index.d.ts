// Code generated by Prisma (prisma@1.17.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  color: (where?: ColorWhereInput) => Promise<boolean>;
  page: (where?: PageWhereInput) => Promise<boolean>;
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  style: (where?: StyleWhereInput) => Promise<boolean>;
  technology: (where?: TechnologyWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  color: (where: ColorWhereUniqueInput) => Color;
  colors: (
    args?: {
      where?: ColorWhereInput;
      orderBy?: ColorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<ColorNode>>;
  colorsConnection: (
    args?: {
      where?: ColorWhereInput;
      orderBy?: ColorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ColorConnection;
  page: (where: PageWhereUniqueInput) => Page;
  pages: (
    args?: {
      where?: PageWhereInput;
      orderBy?: PageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<PageNode>>;
  pagesConnection: (
    args?: {
      where?: PageWhereInput;
      orderBy?: PageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PageConnection;
  project: (where: ProjectWhereUniqueInput) => Project;
  projects: (
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<ProjectNode>>;
  projectsConnection: (
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProjectConnection;
  style: (where: StyleWhereUniqueInput) => Style;
  styles: (
    args?: {
      where?: StyleWhereInput;
      orderBy?: StyleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<StyleNode>>;
  stylesConnection: (
    args?: {
      where?: StyleWhereInput;
      orderBy?: StyleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StyleConnection;
  technology: (where: TechnologyWhereUniqueInput) => Technology;
  technologies: (
    args?: {
      where?: TechnologyWhereInput;
      orderBy?: TechnologyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<TechnologyNode>>;
  technologiesConnection: (
    args?: {
      where?: TechnologyWhereInput;
      orderBy?: TechnologyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TechnologyConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<UserNode>>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createColor: (data: ColorCreateInput) => Color;
  updateColor: (
    args: { data: ColorUpdateInput; where: ColorWhereUniqueInput }
  ) => Color;
  updateManyColors: (
    args: { data: ColorUpdateInput; where?: ColorWhereInput }
  ) => BatchPayload;
  upsertColor: (
    args: {
      where: ColorWhereUniqueInput;
      create: ColorCreateInput;
      update: ColorUpdateInput;
    }
  ) => Color;
  deleteColor: (where: ColorWhereUniqueInput) => Color;
  deleteManyColors: (where?: ColorWhereInput) => BatchPayload;
  createPage: (data: PageCreateInput) => Page;
  updatePage: (
    args: { data: PageUpdateInput; where: PageWhereUniqueInput }
  ) => Page;
  updateManyPages: (
    args: { data: PageUpdateInput; where?: PageWhereInput }
  ) => BatchPayload;
  upsertPage: (
    args: {
      where: PageWhereUniqueInput;
      create: PageCreateInput;
      update: PageUpdateInput;
    }
  ) => Page;
  deletePage: (where: PageWhereUniqueInput) => Page;
  deleteManyPages: (where?: PageWhereInput) => BatchPayload;
  createProject: (data: ProjectCreateInput) => Project;
  updateProject: (
    args: { data: ProjectUpdateInput; where: ProjectWhereUniqueInput }
  ) => Project;
  updateManyProjects: (
    args: { data: ProjectUpdateInput; where?: ProjectWhereInput }
  ) => BatchPayload;
  upsertProject: (
    args: {
      where: ProjectWhereUniqueInput;
      create: ProjectCreateInput;
      update: ProjectUpdateInput;
    }
  ) => Project;
  deleteProject: (where: ProjectWhereUniqueInput) => Project;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayload;
  createStyle: (data: StyleCreateInput) => Style;
  updateStyle: (
    args: { data: StyleUpdateInput; where: StyleWhereUniqueInput }
  ) => Style;
  updateManyStyles: (
    args: { data: StyleUpdateInput; where?: StyleWhereInput }
  ) => BatchPayload;
  upsertStyle: (
    args: {
      where: StyleWhereUniqueInput;
      create: StyleCreateInput;
      update: StyleUpdateInput;
    }
  ) => Style;
  deleteStyle: (where: StyleWhereUniqueInput) => Style;
  deleteManyStyles: (where?: StyleWhereInput) => BatchPayload;
  createTechnology: (data: TechnologyCreateInput) => Technology;
  updateTechnology: (
    args: { data: TechnologyUpdateInput; where: TechnologyWhereUniqueInput }
  ) => Technology;
  updateManyTechnologies: (
    args: { data: TechnologyUpdateInput; where?: TechnologyWhereInput }
  ) => BatchPayload;
  upsertTechnology: (
    args: {
      where: TechnologyWhereUniqueInput;
      create: TechnologyCreateInput;
      update: TechnologyUpdateInput;
    }
  ) => Technology;
  deleteTechnology: (where: TechnologyWhereUniqueInput) => Technology;
  deleteManyTechnologies: (where?: TechnologyWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  color: (
    where?: ColorSubscriptionWhereInput
  ) => ColorSubscriptionPayloadSubscription;
  page: (
    where?: PageSubscriptionWhereInput
  ) => PageSubscriptionPayloadSubscription;
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  style: (
    where?: StyleSubscriptionWhereInput
  ) => StyleSubscriptionPayloadSubscription;
  technology: (
    where?: TechnologySubscriptionWhereInput
  ) => TechnologySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type Shape = "JAGGED" | "ROUND" | "SQUARE";

export type PageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "title_ASC"
  | "title_DESC"
  | "subTitle_ASC"
  | "subTitle_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ColorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "shade_ASC"
  | "shade_DESC"
  | "hex_ASC"
  | "hex_DESC"
  | "rgb_ASC"
  | "rgb_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "image_ASC"
  | "image_DESC"
  | "imageLarge_ASC"
  | "imageLarge_DESC"
  | "imagePlaceholder_ASC"
  | "imagePlaceholder_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "finishDate_ASC"
  | "finishDate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TechnologyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "image_ASC"
  | "image_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "lastLoggedIn_ASC"
  | "lastLoggedIn_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Shade = "LIGHT" | "DARK";

export type StyleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "style_ASC"
  | "style_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface ProjectUpdateOneWithoutPageInput {
  create?: ProjectCreateWithoutPageInput;
  update?: ProjectUpdateWithoutPageDataInput;
  upsert?: ProjectUpsertWithoutPageInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ProjectWhereUniqueInput;
}

export interface ProjectCreateInput {
  name: String;
  description: String;
  page?: PageCreateOneWithoutProjectInput;
  image?: String;
  imageLarge?: String;
  imagePlaceholder?: String;
  styleSet?: StyleCreateOneInput;
  startDate?: DateTimeInput;
  finishDate?: DateTimeInput;
}

export type ColorWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TechnologyWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  color?: ColorWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: TechnologyWhereInput[] | TechnologyWhereInput;
  OR?: TechnologyWhereInput[] | TechnologyWhereInput;
  NOT?: TechnologyWhereInput[] | TechnologyWhereInput;
}

export interface ColorSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ColorWhereInput;
  AND?: ColorSubscriptionWhereInput[] | ColorSubscriptionWhereInput;
  OR?: ColorSubscriptionWhereInput[] | ColorSubscriptionWhereInput;
  NOT?: ColorSubscriptionWhereInput[] | ColorSubscriptionWhereInput;
}

export interface StyleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StyleWhereInput;
  AND?: StyleSubscriptionWhereInput[] | StyleSubscriptionWhereInput;
  OR?: StyleSubscriptionWhereInput[] | StyleSubscriptionWhereInput;
  NOT?: StyleSubscriptionWhereInput[] | StyleSubscriptionWhereInput;
}

export interface UserCreateInput {
  name: String;
  email: String;
  nickname?: String;
  lastLoggedIn?: DateTimeInput;
}

export interface ProjectUpsertWithoutPageInput {
  update: ProjectUpdateWithoutPageDataInput;
  create: ProjectCreateWithoutPageInput;
}

export interface ColorUpsertNestedInput {
  update: ColorUpdateDataInput;
  create: ColorCreateInput;
}

export interface StyleUpsertNestedInput {
  update: StyleUpdateDataInput;
  create: StyleCreateInput;
}

export interface TechnologyUpdateInput {
  name?: String;
  image?: String;
  color?: ColorUpdateOneRequiredInput;
}

export interface ColorUpsertWithWhereUniqueNestedInput {
  where: ColorWhereUniqueInput;
  update: ColorUpdateDataInput;
  create: ColorCreateInput;
}

export interface PageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  subTitle?: String;
  subTitle_not?: String;
  subTitle_in?: String[] | String;
  subTitle_not_in?: String[] | String;
  subTitle_lt?: String;
  subTitle_lte?: String;
  subTitle_gt?: String;
  subTitle_gte?: String;
  subTitle_contains?: String;
  subTitle_not_contains?: String;
  subTitle_starts_with?: String;
  subTitle_not_starts_with?: String;
  subTitle_ends_with?: String;
  subTitle_not_ends_with?: String;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  project?: ProjectWhereInput;
  isPublished?: Boolean;
  isPublished_not?: Boolean;
  style?: StyleWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PageWhereInput[] | PageWhereInput;
  OR?: PageWhereInput[] | PageWhereInput;
  NOT?: PageWhereInput[] | PageWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface StyleWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  colors_every?: ColorWhereInput;
  colors_some?: ColorWhereInput;
  colors_none?: ColorWhereInput;
  style?: Shape;
  style_not?: Shape;
  style_in?: Shape[] | Shape;
  style_not_in?: Shape[] | Shape;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: StyleWhereInput[] | StyleWhereInput;
  OR?: StyleWhereInput[] | StyleWhereInput;
  NOT?: StyleWhereInput[] | StyleWhereInput;
}

export interface ColorUpdateDataInput {
  shade?: Shade;
  hex?: String;
  rgb?: String;
}

export interface ColorCreateOneInput {
  create?: ColorCreateInput;
  connect?: ColorWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  nickname?: String;
  nickname_not?: String;
  nickname_in?: String[] | String;
  nickname_not_in?: String[] | String;
  nickname_lt?: String;
  nickname_lte?: String;
  nickname_gt?: String;
  nickname_gte?: String;
  nickname_contains?: String;
  nickname_not_contains?: String;
  nickname_starts_with?: String;
  nickname_not_starts_with?: String;
  nickname_ends_with?: String;
  nickname_not_ends_with?: String;
  lastLoggedIn?: DateTimeInput;
  lastLoggedIn_not?: DateTimeInput;
  lastLoggedIn_in?: DateTimeInput[] | DateTimeInput;
  lastLoggedIn_not_in?: DateTimeInput[] | DateTimeInput;
  lastLoggedIn_lt?: DateTimeInput;
  lastLoggedIn_lte?: DateTimeInput;
  lastLoggedIn_gt?: DateTimeInput;
  lastLoggedIn_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface StyleUpdateInput {
  colors?: ColorUpdateManyInput;
  style?: Shape;
}

export interface TechnologySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TechnologyWhereInput;
  AND?: TechnologySubscriptionWhereInput[] | TechnologySubscriptionWhereInput;
  OR?: TechnologySubscriptionWhereInput[] | TechnologySubscriptionWhereInput;
  NOT?: TechnologySubscriptionWhereInput[] | TechnologySubscriptionWhereInput;
}

export interface ColorWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  shade?: Shade;
  shade_not?: Shade;
  shade_in?: Shade[] | Shade;
  shade_not_in?: Shade[] | Shade;
  hex?: String;
  hex_not?: String;
  hex_in?: String[] | String;
  hex_not_in?: String[] | String;
  hex_lt?: String;
  hex_lte?: String;
  hex_gt?: String;
  hex_gte?: String;
  hex_contains?: String;
  hex_not_contains?: String;
  hex_starts_with?: String;
  hex_not_starts_with?: String;
  hex_ends_with?: String;
  hex_not_ends_with?: String;
  rgb?: String;
  rgb_not?: String;
  rgb_in?: String[] | String;
  rgb_not_in?: String[] | String;
  rgb_lt?: String;
  rgb_lte?: String;
  rgb_gt?: String;
  rgb_gte?: String;
  rgb_contains?: String;
  rgb_not_contains?: String;
  rgb_starts_with?: String;
  rgb_not_starts_with?: String;
  rgb_ends_with?: String;
  rgb_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ColorWhereInput[] | ColorWhereInput;
  OR?: ColorWhereInput[] | ColorWhereInput;
  NOT?: ColorWhereInput[] | ColorWhereInput;
}

export interface ColorUpdateWithWhereUniqueNestedInput {
  where: ColorWhereUniqueInput;
  data: ColorUpdateDataInput;
}

export interface PageUpdateWithoutProjectDataInput {
  name?: String;
  title?: String;
  subTitle?: String;
  slug?: String;
  isPublished?: Boolean;
  style?: StyleUpdateOneInput;
}

export interface ColorUpdateManyInput {
  create?: ColorCreateInput[] | ColorCreateInput;
  delete?: ColorWhereUniqueInput[] | ColorWhereUniqueInput;
  connect?: ColorWhereUniqueInput[] | ColorWhereUniqueInput;
  disconnect?: ColorWhereUniqueInput[] | ColorWhereUniqueInput;
  update?:
    | ColorUpdateWithWhereUniqueNestedInput[]
    | ColorUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ColorUpsertWithWhereUniqueNestedInput[]
    | ColorUpsertWithWhereUniqueNestedInput;
}

export type StyleWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface StyleUpdateDataInput {
  colors?: ColorUpdateManyInput;
  style?: Shape;
}

export interface ProjectUpdateInput {
  name?: String;
  description?: String;
  page?: PageUpdateOneWithoutProjectInput;
  image?: String;
  imageLarge?: String;
  imagePlaceholder?: String;
  styleSet?: StyleUpdateOneInput;
  startDate?: DateTimeInput;
  finishDate?: DateTimeInput;
}

export interface PageCreateOneWithoutProjectInput {
  create?: PageCreateWithoutProjectInput;
  connect?: PageWhereUniqueInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  nickname?: String;
  lastLoggedIn?: DateTimeInput;
}

export interface ColorCreateInput {
  shade: Shade;
  hex: String;
  rgb?: String;
}

export interface ColorUpdateOneRequiredInput {
  create?: ColorCreateInput;
  update?: ColorUpdateDataInput;
  upsert?: ColorUpsertNestedInput;
  connect?: ColorWhereUniqueInput;
}

export interface ColorUpdateInput {
  shade?: Shade;
  hex?: String;
  rgb?: String;
}

export interface ProjectWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  page?: PageWhereInput;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  imageLarge?: String;
  imageLarge_not?: String;
  imageLarge_in?: String[] | String;
  imageLarge_not_in?: String[] | String;
  imageLarge_lt?: String;
  imageLarge_lte?: String;
  imageLarge_gt?: String;
  imageLarge_gte?: String;
  imageLarge_contains?: String;
  imageLarge_not_contains?: String;
  imageLarge_starts_with?: String;
  imageLarge_not_starts_with?: String;
  imageLarge_ends_with?: String;
  imageLarge_not_ends_with?: String;
  imagePlaceholder?: String;
  imagePlaceholder_not?: String;
  imagePlaceholder_in?: String[] | String;
  imagePlaceholder_not_in?: String[] | String;
  imagePlaceholder_lt?: String;
  imagePlaceholder_lte?: String;
  imagePlaceholder_gt?: String;
  imagePlaceholder_gte?: String;
  imagePlaceholder_contains?: String;
  imagePlaceholder_not_contains?: String;
  imagePlaceholder_starts_with?: String;
  imagePlaceholder_not_starts_with?: String;
  imagePlaceholder_ends_with?: String;
  imagePlaceholder_not_ends_with?: String;
  styleSet?: StyleWhereInput;
  startDate?: DateTimeInput;
  startDate_not?: DateTimeInput;
  startDate_in?: DateTimeInput[] | DateTimeInput;
  startDate_not_in?: DateTimeInput[] | DateTimeInput;
  startDate_lt?: DateTimeInput;
  startDate_lte?: DateTimeInput;
  startDate_gt?: DateTimeInput;
  startDate_gte?: DateTimeInput;
  finishDate?: DateTimeInput;
  finishDate_not?: DateTimeInput;
  finishDate_in?: DateTimeInput[] | DateTimeInput;
  finishDate_not_in?: DateTimeInput[] | DateTimeInput;
  finishDate_lt?: DateTimeInput;
  finishDate_lte?: DateTimeInput;
  finishDate_gt?: DateTimeInput;
  finishDate_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ProjectWhereInput[] | ProjectWhereInput;
  OR?: ProjectWhereInput[] | ProjectWhereInput;
  NOT?: ProjectWhereInput[] | ProjectWhereInput;
}

export interface StyleUpdateOneInput {
  create?: StyleCreateInput;
  update?: StyleUpdateDataInput;
  upsert?: StyleUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: StyleWhereUniqueInput;
}

export interface TechnologyCreateInput {
  name: String;
  image: String;
  color: ColorCreateOneInput;
}

export interface ProjectUpdateWithoutPageDataInput {
  name?: String;
  description?: String;
  image?: String;
  imageLarge?: String;
  imagePlaceholder?: String;
  styleSet?: StyleUpdateOneInput;
  startDate?: DateTimeInput;
  finishDate?: DateTimeInput;
}

export interface PageUpsertWithoutProjectInput {
  update: PageUpdateWithoutProjectDataInput;
  create: PageCreateWithoutProjectInput;
}

export interface PageCreateInput {
  name: String;
  title: String;
  subTitle?: String;
  slug: String;
  project?: ProjectCreateOneWithoutPageInput;
  isPublished?: Boolean;
  style?: StyleCreateOneInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface ProjectCreateOneWithoutPageInput {
  create?: ProjectCreateWithoutPageInput;
  connect?: ProjectWhereUniqueInput;
}

export type TechnologyWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ProjectCreateWithoutPageInput {
  name: String;
  description: String;
  image?: String;
  imageLarge?: String;
  imagePlaceholder?: String;
  styleSet?: StyleCreateOneInput;
  startDate?: DateTimeInput;
  finishDate?: DateTimeInput;
}

export interface PageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PageWhereInput;
  AND?: PageSubscriptionWhereInput[] | PageSubscriptionWhereInput;
  OR?: PageSubscriptionWhereInput[] | PageSubscriptionWhereInput;
  NOT?: PageSubscriptionWhereInput[] | PageSubscriptionWhereInput;
}

export interface PageUpdateInput {
  name?: String;
  title?: String;
  subTitle?: String;
  slug?: String;
  project?: ProjectUpdateOneWithoutPageInput;
  isPublished?: Boolean;
  style?: StyleUpdateOneInput;
}

export interface ColorCreateManyInput {
  create?: ColorCreateInput[] | ColorCreateInput;
  connect?: ColorWhereUniqueInput[] | ColorWhereUniqueInput;
}

export interface StyleCreateInput {
  colors?: ColorCreateManyInput;
  style?: Shape;
}

export interface StyleCreateOneInput {
  create?: StyleCreateInput;
  connect?: StyleWhereUniqueInput;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProjectWhereInput;
  AND?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
  OR?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
  NOT?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
}

export type PageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PageCreateWithoutProjectInput {
  name: String;
  title: String;
  subTitle?: String;
  slug: String;
  isPublished?: Boolean;
  style?: StyleCreateOneInput;
}

export interface PageUpdateOneWithoutProjectInput {
  create?: PageCreateWithoutProjectInput;
  update?: PageUpdateWithoutProjectDataInput;
  upsert?: PageUpsertWithoutProjectInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PageWhereUniqueInput;
}

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PageNode {
  id: ID_Output;
  name: String;
  title: String;
  subTitle?: String;
  slug: String;
  isPublished: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Page extends Promise<PageNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  subTitle: () => Promise<String>;
  slug: () => Promise<String>;
  project: <T = Project>() => T;
  isPublished: () => Promise<Boolean>;
  style: <T = Style>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PageSubscription
  extends Promise<AsyncIterator<PageNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  subTitle: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  project: <T = ProjectSubscription>() => T;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  style: <T = StyleSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  name: String;
  email: String;
  nickname?: String;
  lastLoggedIn?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  nickname: () => Promise<String>;
  lastLoggedIn: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  lastLoggedIn: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateColorNode {
  count: Int;
}

export interface AggregateColor
  extends Promise<AggregateColorNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateColorSubscription
  extends Promise<AsyncIterator<AggregateColorNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ColorEdgeNode {
  cursor: String;
}

export interface ColorEdge extends Promise<ColorEdgeNode>, Fragmentable {
  node: <T = Color>() => T;
  cursor: () => Promise<String>;
}

export interface ColorEdgeSubscription
  extends Promise<AsyncIterator<ColorEdgeNode>>,
    Fragmentable {
  node: <T = ColorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<UserEdgeNode>>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<UserEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TechnologySubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface TechnologySubscriptionPayload
  extends Promise<TechnologySubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Technology>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TechnologyPreviousValues>() => T;
}

export interface TechnologySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TechnologySubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TechnologySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TechnologyPreviousValuesSubscription>() => T;
}

export interface UserNode {
  id: ID_Output;
  name: String;
  email: String;
  nickname?: String;
  lastLoggedIn?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  nickname: () => Promise<String>;
  lastLoggedIn: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  lastLoggedIn: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateTechnologyNode {
  count: Int;
}

export interface AggregateTechnology
  extends Promise<AggregateTechnologyNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTechnologySubscription
  extends Promise<AsyncIterator<AggregateTechnologyNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TechnologyEdgeNode {
  cursor: String;
}

export interface TechnologyEdge
  extends Promise<TechnologyEdgeNode>,
    Fragmentable {
  node: <T = Technology>() => T;
  cursor: () => Promise<String>;
}

export interface TechnologyEdgeSubscription
  extends Promise<AsyncIterator<TechnologyEdgeNode>>,
    Fragmentable {
  node: <T = TechnologySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TechnologyNode {
  id: ID_Output;
  name: String;
  image: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Technology extends Promise<TechnologyNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  image: () => Promise<String>;
  color: <T = Color>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TechnologySubscription
  extends Promise<AsyncIterator<TechnologyNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  color: <T = ColorSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface StyleEdgeNode {
  cursor: String;
}

export interface StyleEdge extends Promise<StyleEdgeNode>, Fragmentable {
  node: <T = Style>() => T;
  cursor: () => Promise<String>;
}

export interface StyleEdgeSubscription
  extends Promise<AsyncIterator<StyleEdgeNode>>,
    Fragmentable {
  node: <T = StyleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ColorSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ColorSubscriptionPayload
  extends Promise<ColorSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Color>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ColorPreviousValues>() => T;
}

export interface ColorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ColorSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ColorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ColorPreviousValuesSubscription>() => T;
}

export interface AggregateProjectNode {
  count: Int;
}

export interface AggregateProject
  extends Promise<AggregateProjectNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProjectNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ColorPreviousValuesNode {
  id: ID_Output;
  shade: Shade;
  hex: String;
  rgb?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ColorPreviousValues
  extends Promise<ColorPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  shade: () => Promise<Shade>;
  hex: () => Promise<String>;
  rgb: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ColorPreviousValuesSubscription
  extends Promise<AsyncIterator<ColorPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  shade: () => Promise<AsyncIterator<Shade>>;
  hex: () => Promise<AsyncIterator<String>>;
  rgb: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectConnectionNode {}

export interface ProjectConnection
  extends Promise<ProjectConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<ProjectEdgeNode>>>() => T;
  aggregate: <T = AggregateProject>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<ProjectEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface ColorConnectionNode {}

export interface ColorConnection
  extends Promise<ColorConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<ColorEdgeNode>>>() => T;
  aggregate: <T = AggregateColor>() => T;
}

export interface ColorConnectionSubscription
  extends Promise<AsyncIterator<ColorConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<ColorEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateColorSubscription>() => T;
}

export interface PageEdgeNode {
  cursor: String;
}

export interface PageEdge extends Promise<PageEdgeNode>, Fragmentable {
  node: <T = Page>() => T;
  cursor: () => Promise<String>;
}

export interface PageEdgeSubscription
  extends Promise<AsyncIterator<PageEdgeNode>>,
    Fragmentable {
  node: <T = PageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PageSubscriptionPayload
  extends Promise<PageSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Page>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PagePreviousValues>() => T;
}

export interface PageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PageSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PagePreviousValuesSubscription>() => T;
}

export interface StyleNode {
  id: ID_Output;
  style: Shape;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Style extends Promise<StyleNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  colors: <T = Promise<Array<ColorNode>>>(
    args?: {
      where?: ColorWhereInput;
      orderBy?: ColorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  style: () => Promise<Shape>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StyleSubscription
  extends Promise<AsyncIterator<StyleNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  colors: <T = Promise<AsyncIterator<Array<ColorSubscription>>>>(
    args?: {
      where?: ColorWhereInput;
      orderBy?: ColorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  style: () => Promise<AsyncIterator<Shape>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PagePreviousValuesNode {
  id: ID_Output;
  name: String;
  title: String;
  subTitle?: String;
  slug: String;
  isPublished: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PagePreviousValues
  extends Promise<PagePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  title: () => Promise<String>;
  subTitle: () => Promise<String>;
  slug: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PagePreviousValuesSubscription
  extends Promise<AsyncIterator<PagePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  subTitle: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ColorNode {
  id: ID_Output;
  shade: Shade;
  hex: String;
  rgb?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Color extends Promise<ColorNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  shade: () => Promise<Shade>;
  hex: () => Promise<String>;
  rgb: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ColorSubscription
  extends Promise<AsyncIterator<ColorNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  shade: () => Promise<AsyncIterator<Shade>>;
  hex: () => Promise<AsyncIterator<String>>;
  rgb: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateStyleNode {
  count: Int;
}

export interface AggregateStyle
  extends Promise<AggregateStyleNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStyleSubscription
  extends Promise<AsyncIterator<AggregateStyleNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ProjectSubscriptionPayload
  extends Promise<ProjectSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Project>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValues>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface ProjectEdgeNode {
  cursor: String;
}

export interface ProjectEdge extends Promise<ProjectEdgeNode>, Fragmentable {
  node: <T = Project>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdgeNode>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageConnectionNode {}

export interface PageConnection
  extends Promise<PageConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<PageEdgeNode>>>() => T;
  aggregate: <T = AggregatePage>() => T;
}

export interface PageConnectionSubscription
  extends Promise<AsyncIterator<PageConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<PageEdgeSubscription>>>>() => T;
  aggregate: <T = AggregatePageSubscription>() => T;
}

export interface StylePreviousValuesNode {
  id: ID_Output;
  style: Shape;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface StylePreviousValues
  extends Promise<StylePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  style: () => Promise<Shape>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface StylePreviousValuesSubscription
  extends Promise<AsyncIterator<StylePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  style: () => Promise<AsyncIterator<Shape>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StyleSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface StyleSubscriptionPayload
  extends Promise<StyleSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Style>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StylePreviousValues>() => T;
}

export interface StyleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StyleSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StyleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StylePreviousValuesSubscription>() => T;
}

export interface TechnologyPreviousValuesNode {
  id: ID_Output;
  name: String;
  image: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TechnologyPreviousValues
  extends Promise<TechnologyPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  image: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TechnologyPreviousValuesSubscription
  extends Promise<AsyncIterator<TechnologyPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectPreviousValuesNode {
  id: ID_Output;
  name: String;
  description: String;
  image?: String;
  imageLarge?: String;
  imagePlaceholder?: String;
  startDate?: DateTimeOutput;
  finishDate?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProjectPreviousValues
  extends Promise<ProjectPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  imageLarge: () => Promise<String>;
  imagePlaceholder: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  finishDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  imageLarge: () => Promise<AsyncIterator<String>>;
  imagePlaceholder: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  finishDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectNode {
  id: ID_Output;
  name: String;
  description: String;
  image?: String;
  imageLarge?: String;
  imagePlaceholder?: String;
  startDate?: DateTimeOutput;
  finishDate?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Project extends Promise<ProjectNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  page: <T = Page>() => T;
  image: () => Promise<String>;
  imageLarge: () => Promise<String>;
  imagePlaceholder: () => Promise<String>;
  styleSet: <T = Style>() => T;
  startDate: () => Promise<DateTimeOutput>;
  finishDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<ProjectNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  page: <T = PageSubscription>() => T;
  image: () => Promise<AsyncIterator<String>>;
  imageLarge: () => Promise<AsyncIterator<String>>;
  imagePlaceholder: () => Promise<AsyncIterator<String>>;
  styleSet: <T = StyleSubscription>() => T;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  finishDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregatePageNode {
  count: Int;
}

export interface AggregatePage
  extends Promise<AggregatePageNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePageSubscription
  extends Promise<AsyncIterator<AggregatePageNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StyleConnectionNode {}

export interface StyleConnection
  extends Promise<StyleConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<StyleEdgeNode>>>() => T;
  aggregate: <T = AggregateStyle>() => T;
}

export interface StyleConnectionSubscription
  extends Promise<AsyncIterator<StyleConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<StyleEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateStyleSubscription>() => T;
}

export interface TechnologyConnectionNode {}

export interface TechnologyConnection
  extends Promise<TechnologyConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<TechnologyEdgeNode>>>() => T;
  aggregate: <T = AggregateTechnology>() => T;
}

export interface TechnologyConnectionSubscription
  extends Promise<AsyncIterator<TechnologyConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<TechnologyEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateTechnologySubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
