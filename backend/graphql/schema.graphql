# import * from './generated/prisma.graphql'

# ███╗   ███╗██╗   ██╗████████╗ █████╗ ████████╗██╗ ██████╗ ███╗   ██╗
# ████╗ ████║██║   ██║╚══██╔══╝██╔══██╗╚══██╔══╝██║██╔═══██╗████╗  ██║
# ██╔████╔██║██║   ██║   ██║   ███████║   ██║   ██║██║   ██║██╔██╗ ██║
# ██║╚██╔╝██║██║   ██║   ██║   ██╔══██║   ██║   ██║██║   ██║██║╚██╗██║
# ██║ ╚═╝ ██║╚██████╔╝   ██║   ██║  ██║   ██║   ██║╚██████╔╝██║ ╚████║
# ╚═╝     ╚═╝ ╚═════╝    ╚═╝   ╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝

scalar Upload

# Basic Structures
type SuccessMessage {
    message: String
}

# Overrides
type User {
    id: ID!
    name: String!
    email: String!
    nickname: String
    avatar: Image
    lastLoggedIn: DateTime
    permissions: [Permisson]
    createdAt: DateTime!
    updatedAt: DateTime!
}

type Mutation {
    # Users
    signUp(
        name: String!
        email: String!
        password: String!
    ): User!

    signIn(
        email: String!
        password: String!
    ): User!

    signOut: SuccessMessage

    requestReset(email: String!): SuccessMessage

    resetPassword(
        resetToken: String!
        password: String!
        confirmPassword: String!
    ): User!

    # Projects
    createProject(
        name: String!
        description: String!
        page: PageCreateOneInput
        projectImages: ProjectImageCreateManyWithoutProjectInput	
        tags: ProjectCreatetagsInput	
        technologies: TechnologyCreateManyInput	
        startDate: DateTime	
        finishDate: DateTime
    ): Project!

    updateProject(
        id: ID!
        name: String
        description: String
        page: PageUpdateOneInput
        projectImages: ProjectImageUpdateManyWithoutProjectInput
        tags: ProjectUpdatetagsInput
        technologies: TechnologyUpdateManyInput
        startDate: DateTime
        finishDate: DateTime
    ): Project!

    deleteProject(
        id: String
    ): Project!


    # Pages
    createPage(
        route: String!
        style: StyleCreateOneInput!
    ): Page!

    updatePage(
        id: ID!
        route: String
        style: StyleUpdateOneRequiredInput
    ): Page!

    deletePage(
        id: String
    ): Page!

    # Technologies
    createTechnology(
        name: String!
        image: ImageCreateOneInput
        color: ColorCreateOneInput!
    ): Technology!

    updateTechnology(
        id: ID!
        name: String
        image: ImageUpdateOneInput
        color: ColorUpdateOneRequiredInput
    ): Technology!

    deleteTechnology(
        id: String
    ): Technology!

    # Styles
    createStyle(
        colors: ColorCreateManyInput
        shape: Shape
    ): Style!

    updateStyle(
        id: ID!
        colors: ColorUpdateManyInput
        shape: Shape
    ): Style!

    deleteStyle(
        id: String
    ): Style!

    # Images
    createImage(
        url: String!
        title: String!
        caption: String
        file: Upload!
    ): Image!
}

#  ██████╗ ██╗   ██╗███████╗██████╗ ██╗   ██╗
# ██╔═══██╗██║   ██║██╔════╝██╔══██╗╚██╗ ██╔╝
# ██║   ██║██║   ██║█████╗  ██████╔╝ ╚████╔╝ 
# ██║▄▄ ██║██║   ██║██╔══╝  ██╔══██╗  ╚██╔╝  
# ╚██████╔╝╚██████╔╝███████╗██║  ██║   ██║   
#  ╚══▀▀═╝  ╚═════╝ ╚══════╝╚═╝  ╚═╝   ╚═╝   
                                           
type Query {

    # Users
    currentUser: User
    users: [User!]!
    user(where: UserWhereUniqueInput!): User

    # Projects
    projects: [Project!]!
    project(where: ProjectWhereUniqueInput!): Project

    # Pages
    pages: [Page!]!
    page(where: PageWhereUniqueInput!): Page

    # Technologies
    technologies: [Technology!]!
    technology(where: TechnologyWhereUniqueInput!): Technology

    # Styles
    styles: [Style!]!
    style(where: StyleWhereUniqueInput!): Style
}